---
source: src/interp/token.rs
expression: tokens
---
[
    Tk {
        tk_type: SOI,
        wd: WordDesc {
            text: "",
            span: Span {
                start: 0,
                end: 0,
            },
            flags: WdFlags(
                0x0,
            ),
        },
    },
    Tk {
        tk_type: If,
        wd: WordDesc {
            text: "if",
            span: Span {
                start: 0,
                end: 2,
            },
            flags: WdFlags(
                KEYWORD,
            ),
        },
    },
    Tk {
        tk_type: While,
        wd: WordDesc {
            text: "while",
            span: Span {
                start: 3,
                end: 8,
            },
            flags: WdFlags(
                KEYWORD,
            ),
        },
    },
    Tk {
        tk_type: If,
        wd: WordDesc {
            text: "if",
            span: Span {
                start: 9,
                end: 11,
            },
            flags: WdFlags(
                KEYWORD,
            ),
        },
    },
    Tk {
        tk_type: Ident,
        wd: WordDesc {
            text: "true",
            span: Span {
                start: 12,
                end: 16,
            },
            flags: WdFlags(
                0x0,
            ),
        },
    },
    Tk {
        tk_type: Cmdsep,
        wd: WordDesc {
            text: "",
            span: Span {
                start: 0,
                end: 0,
            },
            flags: WdFlags(
                0x0,
            ),
        },
    },
    Tk {
        tk_type: Then,
        wd: WordDesc {
            text: "then",
            span: Span {
                start: 17,
                end: 21,
            },
            flags: WdFlags(
                KEYWORD,
            ),
        },
    },
    Tk {
        tk_type: Ident,
        wd: WordDesc {
            text: "echo",
            span: Span {
                start: 22,
                end: 26,
            },
            flags: WdFlags(
                BUILTIN,
            ),
        },
    },
    Tk {
        tk_type: String,
        wd: WordDesc {
            text: "while",
            span: Span {
                start: 27,
                end: 32,
            },
            flags: WdFlags(
                IS_ARG,
            ),
        },
    },
    Tk {
        tk_type: String,
        wd: WordDesc {
            text: "condition",
            span: Span {
                start: 33,
                end: 42,
            },
            flags: WdFlags(
                IS_ARG,
            ),
        },
    },
    Tk {
        tk_type: Cmdsep,
        wd: WordDesc {
            text: "",
            span: Span {
                start: 0,
                end: 0,
            },
            flags: WdFlags(
                0x0,
            ),
        },
    },
    Tk {
        tk_type: Fi,
        wd: WordDesc {
            text: "fi",
            span: Span {
                start: 43,
                end: 45,
            },
            flags: WdFlags(
                KEYWORD,
            ),
        },
    },
    Tk {
        tk_type: Cmdsep,
        wd: WordDesc {
            text: "",
            span: Span {
                start: 0,
                end: 0,
            },
            flags: WdFlags(
                0x0,
            ),
        },
    },
    Tk {
        tk_type: Do,
        wd: WordDesc {
            text: "do",
            span: Span {
                start: 46,
                end: 48,
            },
            flags: WdFlags(
                KEYWORD,
            ),
        },
    },
    Tk {
        tk_type: If,
        wd: WordDesc {
            text: "if",
            span: Span {
                start: 49,
                end: 51,
            },
            flags: WdFlags(
                KEYWORD,
            ),
        },
    },
    Tk {
        tk_type: Ident,
        wd: WordDesc {
            text: "true",
            span: Span {
                start: 52,
                end: 56,
            },
            flags: WdFlags(
                0x0,
            ),
        },
    },
    Tk {
        tk_type: Cmdsep,
        wd: WordDesc {
            text: "",
            span: Span {
                start: 0,
                end: 0,
            },
            flags: WdFlags(
                0x0,
            ),
        },
    },
    Tk {
        tk_type: Then,
        wd: WordDesc {
            text: "then",
            span: Span {
                start: 57,
                end: 61,
            },
            flags: WdFlags(
                KEYWORD,
            ),
        },
    },
    Tk {
        tk_type: Ident,
        wd: WordDesc {
            text: "echo",
            span: Span {
                start: 62,
                end: 66,
            },
            flags: WdFlags(
                BUILTIN,
            ),
        },
    },
    Tk {
        tk_type: String,
        wd: WordDesc {
            text: "inside",
            span: Span {
                start: 67,
                end: 73,
            },
            flags: WdFlags(
                IS_ARG,
            ),
        },
    },
    Tk {
        tk_type: String,
        wd: WordDesc {
            text: "first",
            span: Span {
                start: 74,
                end: 79,
            },
            flags: WdFlags(
                IS_ARG,
            ),
        },
    },
    Tk {
        tk_type: String,
        wd: WordDesc {
            text: "while",
            span: Span {
                start: 80,
                end: 85,
            },
            flags: WdFlags(
                IS_ARG,
            ),
        },
    },
    Tk {
        tk_type: Cmdsep,
        wd: WordDesc {
            text: "",
            span: Span {
                start: 0,
                end: 0,
            },
            flags: WdFlags(
                0x0,
            ),
        },
    },
    Tk {
        tk_type: Fi,
        wd: WordDesc {
            text: "fi",
            span: Span {
                start: 86,
                end: 88,
            },
            flags: WdFlags(
                KEYWORD,
            ),
        },
    },
    Tk {
        tk_type: Cmdsep,
        wd: WordDesc {
            text: "",
            span: Span {
                start: 0,
                end: 0,
            },
            flags: WdFlags(
                0x0,
            ),
        },
    },
    Tk {
        tk_type: Done,
        wd: WordDesc {
            text: "done",
            span: Span {
                start: 89,
                end: 93,
            },
            flags: WdFlags(
                KEYWORD,
            ),
        },
    },
    Tk {
        tk_type: Cmdsep,
        wd: WordDesc {
            text: "",
            span: Span {
                start: 0,
                end: 0,
            },
            flags: WdFlags(
                0x0,
            ),
        },
    },
    Tk {
        tk_type: Then,
        wd: WordDesc {
            text: "then",
            span: Span {
                start: 94,
                end: 98,
            },
            flags: WdFlags(
                KEYWORD,
            ),
        },
    },
    Tk {
        tk_type: Ident,
        wd: WordDesc {
            text: "echo",
            span: Span {
                start: 99,
                end: 103,
            },
            flags: WdFlags(
                BUILTIN,
            ),
        },
    },
    Tk {
        tk_type: String,
        wd: WordDesc {
            text: "wow",
            span: Span {
                start: 104,
                end: 107,
            },
            flags: WdFlags(
                IS_ARG,
            ),
        },
    },
    Tk {
        tk_type: Cmdsep,
        wd: WordDesc {
            text: "",
            span: Span {
                start: 0,
                end: 0,
            },
            flags: WdFlags(
                0x0,
            ),
        },
    },
    Tk {
        tk_type: Elif,
        wd: WordDesc {
            text: "elif",
            span: Span {
                start: 108,
                end: 112,
            },
            flags: WdFlags(
                KEYWORD,
            ),
        },
    },
    Tk {
        tk_type: Until,
        wd: WordDesc {
            text: "until",
            span: Span {
                start: 113,
                end: 118,
            },
            flags: WdFlags(
                KEYWORD,
            ),
        },
    },
    Tk {
        tk_type: While,
        wd: WordDesc {
            text: "while",
            span: Span {
                start: 119,
                end: 124,
            },
            flags: WdFlags(
                KEYWORD,
            ),
        },
    },
    Tk {
        tk_type: If,
        wd: WordDesc {
            text: "if",
            span: Span {
                start: 125,
                end: 127,
            },
            flags: WdFlags(
                KEYWORD,
            ),
        },
    },
    Tk {
        tk_type: Ident,
        wd: WordDesc {
            text: "true",
            span: Span {
                start: 128,
                end: 132,
            },
            flags: WdFlags(
                0x0,
            ),
        },
    },
    Tk {
        tk_type: Cmdsep,
        wd: WordDesc {
            text: "",
            span: Span {
                start: 0,
                end: 0,
            },
            flags: WdFlags(
                0x0,
            ),
        },
    },
    Tk {
        tk_type: Then,
        wd: WordDesc {
            text: "then",
            span: Span {
                start: 133,
                end: 137,
            },
            flags: WdFlags(
                KEYWORD,
            ),
        },
    },
    Tk {
        tk_type: Ident,
        wd: WordDesc {
            text: "echo",
            span: Span {
                start: 138,
                end: 142,
            },
            flags: WdFlags(
                BUILTIN,
            ),
        },
    },
    Tk {
        tk_type: String,
        wd: WordDesc {
            text: "double",
            span: Span {
                start: 143,
                end: 149,
            },
            flags: WdFlags(
                IS_ARG,
            ),
        },
    },
    Tk {
        tk_type: String,
        wd: WordDesc {
            text: "loop",
            span: Span {
                start: 150,
                end: 154,
            },
            flags: WdFlags(
                IS_ARG,
            ),
        },
    },
    Tk {
        tk_type: Cmdsep,
        wd: WordDesc {
            text: "",
            span: Span {
                start: 0,
                end: 0,
            },
            flags: WdFlags(
                0x0,
            ),
        },
    },
    Tk {
        tk_type: Fi,
        wd: WordDesc {
            text: "fi",
            span: Span {
                start: 155,
                end: 157,
            },
            flags: WdFlags(
                KEYWORD,
            ),
        },
    },
    Tk {
        tk_type: Cmdsep,
        wd: WordDesc {
            text: "",
            span: Span {
                start: 0,
                end: 0,
            },
            flags: WdFlags(
                0x0,
            ),
        },
    },
    Tk {
        tk_type: Do,
        wd: WordDesc {
            text: "do",
            span: Span {
                start: 158,
                end: 160,
            },
            flags: WdFlags(
                KEYWORD,
            ),
        },
    },
    Tk {
        tk_type: If,
        wd: WordDesc {
            text: "if",
            span: Span {
                start: 161,
                end: 163,
            },
            flags: WdFlags(
                KEYWORD,
            ),
        },
    },
    Tk {
        tk_type: Ident,
        wd: WordDesc {
            text: "true",
            span: Span {
                start: 164,
                end: 168,
            },
            flags: WdFlags(
                0x0,
            ),
        },
    },
    Tk {
        tk_type: Cmdsep,
        wd: WordDesc {
            text: "",
            span: Span {
                start: 0,
                end: 0,
            },
            flags: WdFlags(
                0x0,
            ),
        },
    },
    Tk {
        tk_type: Then,
        wd: WordDesc {
            text: "then",
            span: Span {
                start: 169,
                end: 173,
            },
            flags: WdFlags(
                KEYWORD,
            ),
        },
    },
    Tk {
        tk_type: Ident,
        wd: WordDesc {
            text: "echo",
            span: Span {
                start: 174,
                end: 178,
            },
            flags: WdFlags(
                BUILTIN,
            ),
        },
    },
    Tk {
        tk_type: String,
        wd: WordDesc {
            text: "another",
            span: Span {
                start: 179,
                end: 186,
            },
            flags: WdFlags(
                IS_ARG,
            ),
        },
    },
    Tk {
        tk_type: String,
        wd: WordDesc {
            text: "double",
            span: Span {
                start: 187,
                end: 193,
            },
            flags: WdFlags(
                IS_ARG,
            ),
        },
    },
    Tk {
        tk_type: String,
        wd: WordDesc {
            text: "loop",
            span: Span {
                start: 194,
                end: 198,
            },
            flags: WdFlags(
                IS_ARG,
            ),
        },
    },
    Tk {
        tk_type: Cmdsep,
        wd: WordDesc {
            text: "",
            span: Span {
                start: 0,
                end: 0,
            },
            flags: WdFlags(
                0x0,
            ),
        },
    },
    Tk {
        tk_type: Fi,
        wd: WordDesc {
            text: "fi",
            span: Span {
                start: 199,
                end: 201,
            },
            flags: WdFlags(
                KEYWORD,
            ),
        },
    },
    Tk {
        tk_type: Cmdsep,
        wd: WordDesc {
            text: "",
            span: Span {
                start: 0,
                end: 0,
            },
            flags: WdFlags(
                0x0,
            ),
        },
    },
    Tk {
        tk_type: Done,
        wd: WordDesc {
            text: "done",
            span: Span {
                start: 202,
                end: 206,
            },
            flags: WdFlags(
                KEYWORD,
            ),
        },
    },
    Tk {
        tk_type: Cmdsep,
        wd: WordDesc {
            text: "",
            span: Span {
                start: 0,
                end: 0,
            },
            flags: WdFlags(
                0x0,
            ),
        },
    },
    Tk {
        tk_type: Do,
        wd: WordDesc {
            text: "do",
            span: Span {
                start: 207,
                end: 209,
            },
            flags: WdFlags(
                KEYWORD,
            ),
        },
    },
    Tk {
        tk_type: Ident,
        wd: WordDesc {
            text: "echo",
            span: Span {
                start: 210,
                end: 214,
            },
            flags: WdFlags(
                BUILTIN,
            ),
        },
    },
    Tk {
        tk_type: Cmdsep,
        wd: WordDesc {
            text: "",
            span: Span {
                start: 0,
                end: 0,
            },
            flags: WdFlags(
                0x0,
            ),
        },
    },
    Tk {
        tk_type: Done,
        wd: WordDesc {
            text: "done",
            span: Span {
                start: 215,
                end: 219,
            },
            flags: WdFlags(
                KEYWORD,
            ),
        },
    },
    Tk {
        tk_type: Cmdsep,
        wd: WordDesc {
            text: "",
            span: Span {
                start: 0,
                end: 0,
            },
            flags: WdFlags(
                0x0,
            ),
        },
    },
    Tk {
        tk_type: Then,
        wd: WordDesc {
            text: "then",
            span: Span {
                start: 220,
                end: 224,
            },
            flags: WdFlags(
                KEYWORD,
            ),
        },
    },
    Tk {
        tk_type: Ident,
        wd: WordDesc {
            text: "echo",
            span: Span {
                start: 225,
                end: 229,
            },
            flags: WdFlags(
                BUILTIN,
            ),
        },
    },
    Tk {
        tk_type: String,
        wd: WordDesc {
            text: "again",
            span: Span {
                start: 230,
                end: 235,
            },
            flags: WdFlags(
                IS_ARG,
            ),
        },
    },
    Tk {
        tk_type: Cmdsep,
        wd: WordDesc {
            text: "",
            span: Span {
                start: 0,
                end: 0,
            },
            flags: WdFlags(
                0x0,
            ),
        },
    },
    Tk {
        tk_type: Else,
        wd: WordDesc {
            text: "else",
            span: Span {
                start: 236,
                end: 240,
            },
            flags: WdFlags(
                KEYWORD,
            ),
        },
    },
    Tk {
        tk_type: Ident,
        wd: WordDesc {
            text: "echo",
            span: Span {
                start: 241,
                end: 245,
            },
            flags: WdFlags(
                BUILTIN,
            ),
        },
    },
    Tk {
        tk_type: Cmdsep,
        wd: WordDesc {
            text: "",
            span: Span {
                start: 0,
                end: 0,
            },
            flags: WdFlags(
                0x0,
            ),
        },
    },
    Tk {
        tk_type: Fi,
        wd: WordDesc {
            text: "fi",
            span: Span {
                start: 246,
                end: 248,
            },
            flags: WdFlags(
                KEYWORD,
            ),
        },
    },
]
