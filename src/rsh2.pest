WHITESPACE = _{ " " | "\t" }
COMMENT = _{ "#" ~ ANY* }

cmdsep = _{ ";" | ";" ~ NEWLINE* | NEWLINE+ }
shebang = @{ "#!" ~ filepath ~ (WHITESPACE+ ~ arg)* }

filename = { (quoted_filename|unquoted_filename) }
	quoted_filename = @{ "\"" ~ (!"\"" ~ (ASCII_ALPHANUMERIC|WHITESPACE))* ~ "\"" | "'" ~ (!"'" ~ (ASCII_ALPHANUMERIC|WHITESPACE))* ~ "'" }
    unquoted_filename = @{ (!WHITESPACE ~ !operator ~ !"\"" ~ !"'" ~ ANY)+ }
filepath = { absolute_path | relative_path }
absolute_path = @{ ("/" ~ (!"/" ~ filename)+)+ ~ (!"/")? }
relative_path = @{ ("../" | "./")? ~ (!"/" ~ filename)+ ~ ("/" ~ (!"/" ~ filename)+)* }
directory = { (absolute_path | relative_path) ~ "/" }

subshell = { "(" ~ construct_raw* ~ ")" }
command_sub = @{ ("$" ~ !WHITESPACE) ~ subshell }
test = { "[" ~ arg{,4} ~ "]" }


var_ident = @{ ASCII_ALPHA ~ ASCII_ALPHANUMERIC+ }
weakvar = @{ var_ident ~ "=" ~ (!cmdsep ~ ANY)+ }
var_declare = { (arrayvar|weakvar) }
arrayvar = @{ var_ident ~ "=" ~ "(" ~ (quoted_arg ~ WHITESPACE)* ~ quoted_arg? ~ ")" }
var_sub = @{ "$" ~ var_ident }

or = _{ "||" }
fork = { "&" } // must appear after a complete statement
and = _{ "&&" }
pipe = _{ "|" }
redir = { simple_redir | fd_redir }
	simple_redir = { "<" | ">>" | ">" }
	fd_redir = @{ ASCII_DIGIT ~ (">" | ">>") ~ ("&" ~ ASCII_DIGIT)? }
operator = _{ "||" | "&&" | "|" | "&" | redir }

reserved = { reserved_symbols | reserved_word }
reserved_symbols = { cmdsep | "[" | "]" | "(" | ")" }
reserved_word = { "if" | "then" | "fi" | "do" | "done" | "while" | "for" | "case" | "esac" }
ident = @{ WHITESPACE* ~ !reserved ~ (ASCII_ALPHANUMERIC+ | "_" | "-") }


arg = { quoted_arg | unquoted_arg | command_sub }
	quoted_arg = _{ "\"" ~ (!"\"" ~ ANY)* ~ "\"" | "'" ~ (!"'" ~ ANY)* ~ "'" }
	unquoted_arg = @{ "-"? ~ (!operator ~ !reserved ~ !"\"" ~ !"'" ~ !WHITESPACE ~ ANY)+ }

command = { ident ~ arg* ~ (redir ~ filepath)* }

macro_cmd = { ident ~ macro_arg* }
macro_arg = { m_quoted_arg | m_unquoted_arg }
	m_quoted_arg = _{ "\"" ~ (!"\"" ~ !"!" ~ ANY)* ~ "\"" | "'" ~ (!"'" ~ !"!" ~ ANY)* ~ "'" }
	m_unquoted_arg = @{ "-"? ~ (!operator ~ !"\"" ~ !"'" ~ !WHITESPACE ~ !"!" ~ ANY)+ }

macro = { macro_cmd ~ "!" ~ command }

right = { command }
left = { command }
chain = { left ~ (and | or) ~ right }

pipeline = { (chain|command) ~ (pipe ~ (chain|command))+ }

if = _{ WHITESPACE* ~ "if" ~ NEWLINE* }
then = _{ WHITESPACE* ~ "then" ~ NEWLINE* }
elif = _{ WHITESPACE* ~ "elif" ~ NEWLINE* }
else = _{ WHITESPACE* ~ "else" ~ NEWLINE* }
fi = _{ WHITESPACE* ~ "fi" ~ NEWLINE* }

conditional = {
	if_block ~
	elif_block* ~
	else_block? ~
	fi
}
if_block = { if ~ condition ~ then ~ body }
elif_block = { elif ~ condition ~ then ~ body }
else_block = { else ~ body }
condition = { construct }
body = { construct }

for = _{ "for" ~ NEWLINE* }
in = _{ "in" ~ NEWLINE* }
while = _{ "while" ~ NEWLINE* }
until = _{ "until" ~ NEWLINE* }
do = _{ "do" ~ NEWLINE* }
done = _{ "done" ~ NEWLINE* }

loop = {
	(while_block | until_block | for_block)
}
while_block = _{ while ~ condition ~ do ~ body ~ done }
until_block = _{ until ~ condition ~ do ~ body ~ done }
for_block = _{ for ~ var_ident ~ in ~ var_ident ~ cmdsep ~ do ~ body ~ done }


construct = !{
	(conditional |
    shebang |
    loop |
    pipeline |
	chain |
    test |
    subshell |
    command_sub |
    var_declare |
    command) ~ (cmdsep|EOI)
}
construct_raw = !{
	(conditional |
    loop |
    pipeline |
	chain |
    shebang |
    test |
    subshell |
    command_sub |
    var_declare |
    command) ~ (cmdsep|EOI)?
}

bash = { SOI ~ construct* ~ EOI }
